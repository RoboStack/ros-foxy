diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6ec835d2..38bf871d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,227 +1,235 @@
-cmake_minimum_required(VERSION 3.5)
-
-project(rviz_ogre_vendor)
-
-find_package(ament_cmake REQUIRED)
-
-set(PACKAGE_VERSION "1.0.0")
-
-if(WIN32)
-  set(BUILDING_FREETYPE_LOCALLY ON)
-  set(BUILDING_ZLIB_LOCALLY ON)
-else()
-  set(BUILDING_FREETYPE_LOCALLY OFF)
-  set(BUILDING_ZLIB_LOCALLY OFF)
-endif()
-
-if(WIN32 AND NOT ${CMAKE_VERBOSE_MAKEFILE})
-  set(should_log ON)  # prevent warnings in Windows CI
-else()
-  set(should_log OFF)
-endif()
-
-macro(build_freetype)
-  set(extra_cmake_args)
-  set(FREETYPE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
-
-  if(WIN32)
-    list(APPEND FREETYPE_CXX_FLAGS "/w")
-    list(APPEND extra_cmake_args "-DCMAKE_C_FLAGS=/w")
-  endif()
-
-  if(DEFINED CMAKE_TOOLCHAIN_FILE)
-    list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
-  else()
-    list(APPEND extra_cmake_args "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
-    list(APPEND extra_cmake_args "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
-  endif()
-  list(APPEND extra_cmake_args "-DCMAKE_CXX_FLAGS=${FREETYPE_CXX_FLAGS}")
-
-  include(ExternalProject)
-  ExternalProject_Add(freetype-2.8.1
-    URL https://git.savannah.gnu.org/cgit/freetype/freetype2.git/snapshot/freetype2-VER-2-6-5.tar.gz
-    URL_MD5 0dd62a0125895431e074a3df29f94d69
-    TIMEOUT 600
-    LOG_CONFIGURE ${should_log}
-    LOG_BUILD ${should_log}
-    CMAKE_ARGS
-      -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/freetype_install
-      ${extra_cmake_args}
-      -Wno-dev
-      -DWITH_ZLIB=OFF
-      -DWITH_BZip2=OFF
-      -DWITH_PNG=OFF
-      -DWITH_HarfBuzz=OFF
-  )
-
-  install(
-    DIRECTORY
-      ${CMAKE_CURRENT_BINARY_DIR}/freetype_install/
-    DESTINATION
-      ${CMAKE_INSTALL_PREFIX}/opt/rviz_ogre_vendor
-  )
-endmacro()
-
-macro(build_zlib)
-  set(extra_cmake_args)
-  set(ZLIB_CXX_FLAGS ${CMAKE_CXX_FLAGS})
-
-  if(WIN32)
-    list(APPEND ZLIB_CXX_FLAGS "/w")
-    list(APPEND extra_cmake_args "-DCMAKE_C_FLAGS=/w")
-  endif()
-
-  if(DEFINED CMAKE_TOOLCHAIN_FILE)
-    list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
-  else()
-    list(APPEND extra_cmake_args "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
-    list(APPEND extra_cmake_args "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
-  endif()
-  list(APPEND extra_cmake_args "-DCMAKE_CXX_FLAGS=${ZLIB_CXX_FLAGS}")
-
-  include(ExternalProject)
-  ExternalProject_Add(zlib-1.2.11
-    URL https://www.zlib.net/fossils/zlib-1.2.11.tar.gz
-    URL_MD5 1c9f62f0778697a09d36121ead88e08e
-    TIMEOUT 600
-    LOG_CONFIGURE ${should_log}
-    LOG_BUILD ${should_log}
-    CMAKE_ARGS
-      -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/zlib-install
-      ${extra_cmake_args}
-      -Wno-dev
-  )
-
-  install(
-    DIRECTORY
-      ${CMAKE_CURRENT_BINARY_DIR}/zlib-install/
-    DESTINATION
-      ${CMAKE_INSTALL_PREFIX}/opt/rviz_ogre_vendor
-  )
-endmacro()
-
-macro(build_ogre)
-  set(extra_cmake_args)
-  set(OGRE_CXX_FLAGS)
-  # standard library is important for linking, but the other cxx flags are not
-  if(CMAKE_CXX_FLAGS MATCHES "-stdlib=libc\\+\\+")
-    set(OGRE_CXX_FLAGS "${OGRE_CXX_FLAGS} -stdlib=libc++")
-  endif()
-
-  if(DEFINED CMAKE_BUILD_TYPE)
-    list(APPEND extra_cmake_args -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
-  endif()
-
-  if(WIN32)
-    set(OGRE_CXX_FLAGS "${OGRE_CXX_FLAGS} /w /EHsc")
-    list(APPEND extra_cmake_args "-DCMAKE_C_FLAGS=/w /EHsc")
-  elseif(APPLE)
-    set(OGRE_CXX_FLAGS "${OGRE_CXX_FLAGS} -std=c++14 -stdlib=libc++ -w")
-    list(APPEND extra_cmake_args "-DCMAKE_OSX_ARCHITECTURES='x86_64'")
-  else()  # Linux
-    # include Clang -Wno-everything to disable warnings in that build. GCC doesn't mind it
-    set(OGRE_CXX_FLAGS "${OGRE_CXX_FLAGS} -std=c++14 -w -Wno-everything")
-    list(APPEND extra_cmake_args "-DCMAKE_C_FLAGS=-w")
-  endif()
-  list(APPEND extra_cmake_args "-DOGRE_BUILD_RENDERSYSTEM_GL:BOOL=TRUE")
-  list(APPEND extra_cmake_args "-DOGRE_BUILD_RENDERSYSTEM_D3D11:BOOL=OFF")
-  list(APPEND extra_cmake_args "-DOGRE_BUILD_RENDERSYSTEM_D3D9:BOOL=OFF")
-  list(APPEND extra_cmake_args "-DCMAKE_CXX_FLAGS=${OGRE_CXX_FLAGS}")
-
-  # Uncomment this line to enable the GL3PLUS render engine
-  # list(APPEND extra_cmake_args "-DOGRE_BUILD_RENDERSYSTEM_GL3PLUS:BOOL=TRUE")
-
-  # These next lines can be used to disable some of the components or plugins for OGRE
-  list(APPEND extra_cmake_args "-DOGRE_CONFIG_ENABLE_ZIP:BOOL=ON")
-
-  if(BUILDING_FREETYPE_LOCALLY)
-    list(APPEND extra_cmake_args
-      "-DFREETYPE_HOME=${CMAKE_CURRENT_BINARY_DIR}/freetype_install")
-  endif()
-  if(BUILDING_ZLIB_LOCALLY)
-    list(APPEND extra_cmake_args
-      "-DZLIB_ROOT=${CMAKE_CURRENT_BINARY_DIR}/zlib-install")
-  endif()
-
-  if(DEFINED CMAKE_TOOLCHAIN_FILE)
-    list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
-  else()
-    list(APPEND extra_cmake_args "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
-    list(APPEND extra_cmake_args "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
-  endif()
-
-  include(ExternalProject)
-  ExternalProject_Add(ogre-v1.12.1
-    URL https://github.com/OGRECave/ogre/archive/v1.12.1.zip
-    URL_MD5 cdbea4006d223c173e0a93864111b936
-    TIMEOUT 1200
-    LOG_CONFIGURE ${should_log}
-    LOG_BUILD ${should_log}
-    CMAKE_ARGS
-      -DOGRE_STATIC:BOOL=OFF
-      -DOGRE_DEPENDENCIES_DIR=${CMAKE_CURRENT_BINARY_DIR}/ogredeps
-      -DOGRE_INSTALL_PDB:BOOL=OFF
-      -DOGRE_BUILD_DEPENDENCIES:BOOL=OFF
-      -DOGRE_BUILD_TESTS:BOOL=OFF
-      -DOGRE_BUILD_SAMPLES:BOOL=FALSE
-      -DOGRE_INSTALL_SAMPLES:BOOL=FALSE
-      -DOGRE_INSTALL_SAMPLES_SOURCE:BOOL=FALSE
-      -DOGRE_CONFIG_THREADS:STRING=0
-      -DOGRE_RESOURCEMANAGER_STRICT:STRING=2
-      -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/ogre_install
-      -DOGRE_BUILD_LIBS_AS_FRAMEWORKS:BOOL=OFF
-      -DOGRE_BUILD_COMPONENT_PYTHON:BOOL=FALSE
-      -DOGRE_BUILD_COMPONENT_JAVA:BOOL=FALSE
-      -DOGRE_BUILD_COMPONENT_CSHARP:BOOL=FALSE
-      -DOGRE_BUILD_COMPONENT_BITES:BOOL=FALSE
-      ${extra_cmake_args}
-      -Wno-dev
-    PATCH_COMMAND
-      ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> patch${CMAKE_EXECUTABLE_SUFFIX} -p1 -N < ${CMAKE_CURRENT_SOURCE_DIR}/pragma-patch.diff
-    COMMAND
-      ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/FindFreetype.cmake ${CMAKE_CURRENT_BINARY_DIR}/ogre-v1.12.1-prefix/src/ogre-v1.12.1/CMake/Packages/FindFreetype.cmake
-  )
-
-  if(BUILDING_FREETYPE_LOCALLY)
-    add_dependencies(ogre-v1.12.1 freetype-2.8.1)
-  endif()
-  if(BUILDING_ZLIB_LOCALLY)
-    add_dependencies(ogre-v1.12.1 zlib-1.2.11)
-  endif()
-
-  # The external project will install to the build folder, but we'll install that on make install.
-  install(
-    DIRECTORY
-      ${CMAKE_CURRENT_BINARY_DIR}/ogre_install/
-    DESTINATION
-      ${CMAKE_INSTALL_PREFIX}/opt/rviz_ogre_vendor
-  )
-endmacro()
-
-if(BUILDING_FREETYPE_LOCALLY)
-  build_freetype()
-endif()
-if(BUILDING_ZLIB_LOCALLY)
-  build_zlib()
-endif()
-
-build_ogre()
-
-if(WIN32)
-  ament_environment_hooks(env_hook/rviz_ogre_vendor_library_path.bat)
-  set(ENV_VAR_NAME "PATH")
-  set(ENV_VAR_VALUE "opt\\rviz_ogre_vendor\\bin")
-else()
-  ament_environment_hooks(env_hook/rviz_ogre_vendor_library_path.sh)
-  if(APPLE)
-    set(ENV_VAR_NAME "DYLD_LIBRARY_PATH")
-  else()
-    set(ENV_VAR_NAME "LD_LIBRARY_PATH")
-  endif()
-  set(ENV_VAR_VALUE "opt/rviz_ogre_vendor/lib")
-endif()
-ament_environment_hooks(env_hook/rviz_ogre_vendor_library_path.dsv.in)
-
-ament_package(
-  CONFIG_EXTRAS "rviz_ogre_vendor-extras.cmake.in"
-)
+cmake_minimum_required(VERSION 3.5)
+
+project(rviz_ogre_vendor)
+
+find_package(ament_cmake REQUIRED)
+
+set(PACKAGE_VERSION "1.0.0")
+
+if(WIN32)
+  set(BUILDING_FREETYPE_LOCALLY ON)
+  set(BUILDING_ZLIB_LOCALLY ON)
+else()
+  set(BUILDING_FREETYPE_LOCALLY OFF)
+  set(BUILDING_ZLIB_LOCALLY OFF)
+endif()
+
+if(WIN32 AND NOT ${CMAKE_VERBOSE_MAKEFILE})
+  set(should_log ON)  # prevent warnings in Windows CI
+else()
+  set(should_log OFF)
+endif()
+
+macro(build_freetype)
+  set(extra_cmake_args)
+  set(FREETYPE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
+
+  if(WIN32)
+    list(APPEND FREETYPE_CXX_FLAGS "/w")
+    list(APPEND extra_cmake_args "-DCMAKE_C_FLAGS=/w")
+  endif()
+
+  if(DEFINED CMAKE_TOOLCHAIN_FILE)
+    list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
+  else()
+    list(APPEND extra_cmake_args "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
+    list(APPEND extra_cmake_args "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
+  endif()
+  list(APPEND extra_cmake_args "-DCMAKE_CXX_FLAGS=${FREETYPE_CXX_FLAGS}")
+
+  include(ExternalProject)
+  ExternalProject_Add(freetype-2.8.1
+    URL https://git.savannah.gnu.org/cgit/freetype/freetype2.git/snapshot/freetype2-VER-2-6-5.tar.gz
+    URL_MD5 0dd62a0125895431e074a3df29f94d69
+    TIMEOUT 600
+    LOG_CONFIGURE ${should_log}
+    LOG_BUILD ${should_log}
+    CMAKE_ARGS
+      -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/freetype_install
+      ${extra_cmake_args}
+      -Wno-dev
+      -DWITH_ZLIB=OFF
+      -DWITH_BZip2=OFF
+      -DWITH_PNG=OFF
+      -DWITH_HarfBuzz=OFF
+  )
+
+  install(
+    DIRECTORY
+      ${CMAKE_CURRENT_BINARY_DIR}/freetype_install/
+    DESTINATION
+      ${CMAKE_INSTALL_PREFIX}/opt/rviz_ogre_vendor
+  )
+endmacro()
+
+macro(build_zlib)
+  set(extra_cmake_args)
+  set(ZLIB_CXX_FLAGS ${CMAKE_CXX_FLAGS})
+
+  if(WIN32)
+    list(APPEND ZLIB_CXX_FLAGS "/w")
+    list(APPEND extra_cmake_args "-DCMAKE_C_FLAGS=/w")
+  endif()
+
+  if(DEFINED CMAKE_TOOLCHAIN_FILE)
+    list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
+  else()
+    list(APPEND extra_cmake_args "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
+    list(APPEND extra_cmake_args "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
+  endif()
+  list(APPEND extra_cmake_args "-DCMAKE_CXX_FLAGS=${ZLIB_CXX_FLAGS}")
+
+  include(ExternalProject)
+  ExternalProject_Add(zlib-1.2.11
+    URL https://www.zlib.net/fossils/zlib-1.2.11.tar.gz
+    URL_MD5 1c9f62f0778697a09d36121ead88e08e
+    TIMEOUT 600
+    LOG_CONFIGURE ${should_log}
+    LOG_BUILD ${should_log}
+    CMAKE_ARGS
+      -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/zlib-install
+      ${extra_cmake_args}
+      -Wno-dev
+  )
+
+  install(
+    DIRECTORY
+      ${CMAKE_CURRENT_BINARY_DIR}/zlib-install/
+    DESTINATION
+      ${CMAKE_INSTALL_PREFIX}/opt/rviz_ogre_vendor
+  )
+endmacro()
+
+macro(build_ogre)
+  set(extra_cmake_args)
+  set(OGRE_CXX_FLAGS)
+  # standard library is important for linking, but the other cxx flags are not
+  if(CMAKE_CXX_FLAGS MATCHES "-stdlib=libc\\+\\+")
+    set(OGRE_CXX_FLAGS "${OGRE_CXX_FLAGS} -stdlib=libc++")
+  endif()
+
+  if(DEFINED CMAKE_BUILD_TYPE)
+    list(APPEND extra_cmake_args -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
+  endif()
+
+  if(WIN32)
+    set(OGRE_CXX_FLAGS "${OGRE_CXX_FLAGS} /w /EHsc")
+    list(APPEND extra_cmake_args "-DCMAKE_C_FLAGS=/w /EHsc")
+  elseif(APPLE)
+    set(OGRE_CXX_FLAGS "${OGRE_CXX_FLAGS} -std=c++14 -stdlib=libc++ -w")
+    list(APPEND extra_cmake_args "-DCMAKE_OSX_ARCHITECTURES='x86_64'")
+  else()  # Linux
+    # include Clang -Wno-everything to disable warnings in that build. GCC doesn't mind it
+    set(OGRE_CXX_FLAGS "${OGRE_CXX_FLAGS} -std=c++14 -w -Wno-everything")
+    list(APPEND extra_cmake_args "-DCMAKE_C_FLAGS=-w")
+  endif()
+  list(APPEND extra_cmake_args "-DOGRE_BUILD_RENDERSYSTEM_GL:BOOL=TRUE")
+  list(APPEND extra_cmake_args "-DOGRE_BUILD_RENDERSYSTEM_D3D11:BOOL=OFF")
+  list(APPEND extra_cmake_args "-DOGRE_BUILD_RENDERSYSTEM_D3D9:BOOL=OFF")
+  list(APPEND extra_cmake_args "-DCMAKE_CXX_FLAGS=${OGRE_CXX_FLAGS}")
+
+  # Uncomment this line to enable the GL3PLUS render engine
+  # list(APPEND extra_cmake_args "-DOGRE_BUILD_RENDERSYSTEM_GL3PLUS:BOOL=TRUE")
+
+  # These next lines can be used to disable some of the components or plugins for OGRE
+  list(APPEND extra_cmake_args "-DOGRE_CONFIG_ENABLE_ZIP:BOOL=ON")
+
+  if(BUILDING_FREETYPE_LOCALLY)
+    list(APPEND extra_cmake_args
+      "-DFREETYPE_HOME=${CMAKE_CURRENT_BINARY_DIR}/freetype_install")
+  endif()
+  if(BUILDING_ZLIB_LOCALLY)
+    list(APPEND extra_cmake_args
+      "-DZLIB_ROOT=${CMAKE_CURRENT_BINARY_DIR}/zlib-install")
+  endif()
+
+  if(DEFINED CMAKE_TOOLCHAIN_FILE)
+    list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
+  else()
+    list(APPEND extra_cmake_args "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
+    list(APPEND extra_cmake_args "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
+  endif()
+
+  include(ExternalProject)
+  ExternalProject_Add(ogre-v1.12.1
+    URL https://github.com/OGRECave/ogre/archive/v1.12.1.zip
+    URL_MD5 cdbea4006d223c173e0a93864111b936
+    TIMEOUT 1200
+    LOG_CONFIGURE ${should_log}
+    LOG_BUILD ${should_log}
+    CMAKE_ARGS
+      -DOGRE_STATIC:BOOL=OFF
+      -DOGRE_DEPENDENCIES_DIR=${CMAKE_CURRENT_BINARY_DIR}/ogredeps
+      -DOGRE_INSTALL_PDB:BOOL=OFF
+      -DOGRE_BUILD_DEPENDENCIES:BOOL=OFF
+      -DOGRE_BUILD_TESTS:BOOL=OFF
+      -DOGRE_BUILD_SAMPLES:BOOL=FALSE
+      -DOGRE_INSTALL_SAMPLES:BOOL=FALSE
+      -DOGRE_INSTALL_SAMPLES_SOURCE:BOOL=FALSE
+      -DOGRE_CONFIG_THREADS:STRING=0
+      -DOGRE_RESOURCEMANAGER_STRICT:STRING=2
+      -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/ogre_install
+      -DOGRE_BUILD_LIBS_AS_FRAMEWORKS:BOOL=OFF
+      -DOGRE_BUILD_COMPONENT_PYTHON:BOOL=FALSE
+      -DOGRE_BUILD_COMPONENT_JAVA:BOOL=FALSE
+      -DOGRE_BUILD_COMPONENT_CSHARP:BOOL=FALSE
+      -DOGRE_BUILD_COMPONENT_BITES:BOOL=FALSE
+      ${extra_cmake_args}
+      -Wno-dev
+    PATCH_COMMAND
+      ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> patch${CMAKE_EXECUTABLE_SUFFIX} -p1 -N < ${CMAKE_CURRENT_SOURCE_DIR}/pragma-patch.diff
+    COMMAND
+      ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/FindFreetype.cmake ${CMAKE_CURRENT_BINARY_DIR}/ogre-v1.12.1-prefix/src/ogre-v1.12.1/CMake/Packages/FindFreetype.cmake
+  )
+
+  if(BUILDING_FREETYPE_LOCALLY)
+    add_dependencies(ogre-v1.12.1 freetype-2.8.1)
+  endif()
+  if(BUILDING_ZLIB_LOCALLY)
+    add_dependencies(ogre-v1.12.1 zlib-1.2.11)
+  endif()
+
+  # The external project will install to the build folder, but we'll install that on make install.
+  install(
+    DIRECTORY
+      ${CMAKE_CURRENT_BINARY_DIR}/ogre_install/
+    DESTINATION
+      ${CMAKE_INSTALL_PREFIX}/opt/rviz_ogre_vendor
+  )
+endmacro()
+
+find_package(OGRE 1.12 QUIET)
+if(OGRE_FOUND)
+  ament_package(
+    CONFIG_EXTRAS "rviz_ogre_vendor-extras.cmake.in"
+  )
+  return()
+endif()
+
+if(BUILDING_FREETYPE_LOCALLY)
+  build_freetype()
+endif()
+if(BUILDING_ZLIB_LOCALLY)
+  build_zlib()
+endif()
+
+build_ogre()
+
+if(WIN32)
+  ament_environment_hooks(env_hook/rviz_ogre_vendor_library_path.bat)
+  set(ENV_VAR_NAME "PATH")
+  set(ENV_VAR_VALUE "opt\\rviz_ogre_vendor\\bin")
+else()
+  ament_environment_hooks(env_hook/rviz_ogre_vendor_library_path.sh)
+  if(APPLE)
+    set(ENV_VAR_NAME "DYLD_LIBRARY_PATH")
+  else()
+    set(ENV_VAR_NAME "LD_LIBRARY_PATH")
+  endif()
+  set(ENV_VAR_VALUE "opt/rviz_ogre_vendor/lib")
+endif()
+ament_environment_hooks(env_hook/rviz_ogre_vendor_library_path.dsv.in)
+
+ament_package(
+  CONFIG_EXTRAS "rviz_ogre_vendor-extras.cmake.in"
+)
diff --git a/rviz_ogre_vendor-extras.cmake.in b/rviz_ogre_vendor-extras.cmake.in
index d140d544..d3b55c63 100644
--- a/rviz_ogre_vendor-extras.cmake.in
+++ b/rviz_ogre_vendor-extras.cmake.in
@@ -1,288 +1,284 @@
-# add the local Modules directory to the modules path
-if(WIN32)
-  set(OGRE_DIR "${@PROJECT_NAME@_DIR}/../../../opt/rviz_ogre_vendor/CMake")
-  set(OGRE_CMAKE_MODULE_DIR "${@PROJECT_NAME@_DIR}/../../../opt/rviz_ogre_vendor/CMake")
-  list(INSERT CMAKE_MODULE_PATH 0 ${OGRE_CMAKE_MODULE_DIR})
-  message(STATUS "Prepending to CMAKE_MODULE_PATH: '${OGRE_CMAKE_MODULE_DIR}'")
-elseif(APPLE)
-  set(OGRE_DIR "${@PROJECT_NAME@_DIR}/../../../opt/rviz_ogre_vendor/CMake")
-else()
-  set(OGRE_DIR "${@PROJECT_NAME@_DIR}/../../../opt/rviz_ogre_vendor/lib/OGRE/cmake")
-endif()
-message(STATUS "Setting OGRE_DIR to: '${OGRE_DIR}'")
-
-set(FREETYPE_HOME "${rviz_ogre_vendor_DIR}/../../../opt/rviz_ogre_vendor")
-set(ZLIB_HOME "${rviz_ogre_vendor_DIR}/../../../opt/rviz_ogre_vendor")
-
-find_package(OGRE REQUIRED NO_SYSTEM_ENVIRONMENT_PATH)
-message(STATUS "OGRE_LIBRARIES: ${OGRE_LIBRARIES}")
-message(STATUS "OGRE_LIBRARY_DIRS: ${OGRE_LIBRARY_DIRS}")
-message(STATUS "OGRE_PLUGINS: ${OGRE_PLUGINS}")
-message(STATUS "OGRE_PLUGIN_DIR: ${OGRE_PLUGIN_DIR}")
-
-list(APPEND OGRE_LIBRARIES ${OGRE_PLUGINS})
-list(APPEND OGRE_LIBRARY_DIRS ${OGRE_PLUGIN_DIR})
-
-foreach(_lib IN LISTS OGRE_LIBRARIES)
-  # Remove debug suffix from library name for matching
-  string(REPLACE "_d" "" _lib ${_lib})
-
-  if("OgreMainStatic" STREQUAL ${_lib} OR "OgreMain" STREQUAL ${_lib})
-    find_library(_ogre_main_static_library_abs ${_lib}
-      PATHS
-        ${OGRE_LIBRARY_DIRS}
-      NO_DEFAULT_PATH
-      NO_CMAKE_ENVIRONMENT_PATH
-      NO_CMAKE_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-      NO_CMAKE_SYSTEM_PATH
-      NO_CMAKE_FIND_ROOT_PATH
-    )
-    find_library(_ogre_main_static_library_debug_abs ${_lib}_d
-      PATHS
-        ${OGRE_LIBRARY_DIRS}
-      NO_DEFAULT_PATH
-      NO_CMAKE_ENVIRONMENT_PATH
-      NO_CMAKE_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-      NO_CMAKE_SYSTEM_PATH
-      NO_CMAKE_FIND_ROOT_PATH
-    )
-    if(NOT _ogre_main_static_library_debug_abs AND NOT WIN32)
-      # On macOS it seems the _d is not used, so just use the normal library name.
-      set(_ogre_main_static_library_debug_abs ${_ogre_main_static_library_abs})
-    endif()
-
-    add_library(rviz_ogre_vendor::OgreMain UNKNOWN IMPORTED)
-    message(STATUS "rviz_ogre_vendor::OgreMain for IMPORTED_LOCATION_RELEASE: ${_ogre_main_static_library_abs}")
-    message(STATUS "rviz_ogre_vendor::OgreMain for IMPORTED_LOCATION_DEBUG: ${_ogre_main_static_library_debug_abs}")
-    set_target_properties(rviz_ogre_vendor::OgreMain
-      PROPERTIES
-        IMPORTED_LOCATION_RELEASE ${_ogre_main_static_library_abs}
-        IMPORTED_LOCATION_DEBUG ${_ogre_main_static_library_debug_abs}
-    )
-
-    set_property(TARGET rviz_ogre_vendor::OgreMain
-      PROPERTY
-        INTERFACE_INCLUDE_DIRECTORIES ${OGRE_INCLUDE_DIRS}
-    )
-    if(_ogre_main_static_library_abs)
-      set_property(TARGET rviz_ogre_vendor::OgreMain APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
-    endif()
-    if(_ogre_main_static_library_debug_abs)
-      set_property(TARGET rviz_ogre_vendor::OgreMain APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
-    endif()
-
-    set(_extra_interface_link_libraries)
-    find_library(FREEIMAGE_LIBRARIES freeimage)
-    if(NOT FREEIMAGE_LIBRARIES)
-      message(STATUS "Could not find freeimage library")
-    else()
-      list(APPEND _extra_interface_link_libraries ${FREEIMAGE_LIBRARIES})
-    endif()
-
-    find_package(Freetype QUIET)
-    if(NOT Freetype_FOUND)
-      # try newer method with exported targets
-      set(freetype_DIR
-        "${rviz_ogre_vendor_DIR}/../../../opt/rviz_ogre_vendor/lib/cmake/freetype")
-      find_package(freetype CONFIG REQUIRED)
-    endif()
-    if(FREETYPE_LIBRARIES)
-      list(APPEND _extra_interface_link_libraries ${FREETYPE_LIBRARIES})
-    elseif(TARGET freetype)
-      # newer versions of freetype provide exported cmake targets
-      list(APPEND _extra_interface_link_libraries freetype)
-    else()
-      message(FATAL_ERROR "Could not find freetype package")
-    endif()
-
-    if(WIN32)
-      if(_ogre_main_static_library_debug_abs)
-        set(ZLIB_LIBRARIES "${ZLIB_HOME}/lib/zlibstaticd.lib")
-      else()
-        set(ZLIB_LIBRARIES "${ZLIB_HOME}/lib/zlibstatic.lib")
-      endif()
-    else()
-      find_package(ZLIB REQUIRED)
-    endif()
-
-    if(NOT ZLIB_LIBRARIES)
-      message(FATAL_ERROR "Could not find zlib library")
-    endif()
-    list(APPEND _extra_interface_link_libraries ${ZLIB_LIBRARIES})
-
-    find_package(OpenGL REQUIRED)
-    list(APPEND _extra_interface_link_libraries ${OPENGL_LIBRARIES})
-    list(APPEND _extra_interface_link_libraries ${CMAKE_DL_LIBS})
-    if(UNIX AND NOT APPLE)
-      find_package(X11 REQUIRED)
-      list(APPEND _extra_interface_link_libraries ${X11_LIBRARIES} ${X11_Xt_LIB} ${X11_Xrandr_LIB})
-      find_library(XAW_LIBRARY NAMES Xaw Xaw7 PATHS ${DEP_LIB_SEARCH_DIR} ${X11_LIB_SEARCH_PATH})
-      list(APPEND _extra_interface_link_libraries ${XAW_LIBRARY})
-    endif()
-    if(APPLE)
-      list(APPEND _extra_interface_link_libraries "-framework Cocoa")
-    endif()
-    set_target_properties(rviz_ogre_vendor::OgreMain
-      PROPERTIES
-        "INTERFACE_LINK_LIBRARIES" "${_extra_interface_link_libraries}"
-    )
-  endif()
-  if("OgreOverlayStatic" STREQUAL ${_lib} OR "OgreOverlay" STREQUAL ${_lib})
-    find_library(_ogre_overlay_static_library_abs ${_lib}
-      PATHS
-        ${OGRE_LIBRARY_DIRS}
-      NO_DEFAULT_PATH
-      NO_CMAKE_ENVIRONMENT_PATH
-      NO_CMAKE_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-      NO_CMAKE_SYSTEM_PATH
-      NO_CMAKE_FIND_ROOT_PATH
-    )
-    find_library(_ogre_overlay_static_library_debug_abs ${_lib}_d
-      PATHS
-        ${OGRE_LIBRARY_DIRS}
-      NO_DEFAULT_PATH
-      NO_CMAKE_ENVIRONMENT_PATH
-      NO_CMAKE_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-      NO_CMAKE_SYSTEM_PATH
-      NO_CMAKE_FIND_ROOT_PATH
-    )
-    if(NOT _ogre_overlay_static_library_debug_abs AND NOT WIN32)
-      # On macOS it seems the _d is not used, so just use the normal library name.
-      set(_ogre_overlay_static_library_debug_abs ${_ogre_overlay_static_library_abs})
-    endif()
-
-    add_library(rviz_ogre_vendor::OgreOverlay UNKNOWN IMPORTED)
-    message(STATUS "rviz_ogre_vendor::OgreOverlay for IMPORTED_LOCATION_RELEASE: ${_ogre_overlay_static_library_abs}")
-    message(STATUS "rviz_ogre_vendor::OgreOverlay for IMPORTED_LOCATION_DEBUG: ${_ogre_overlay_static_library_debug_abs}")
-    set_target_properties(rviz_ogre_vendor::OgreOverlay
-      PROPERTIES
-        IMPORTED_LOCATION_RELEASE ${_ogre_overlay_static_library_abs}
-        IMPORTED_LOCATION_DEBUG ${_ogre_overlay_static_library_debug_abs}
-    )
-
-    set_property(TARGET rviz_ogre_vendor::OgreOverlay
-      PROPERTY
-        INTERFACE_INCLUDE_DIRECTORIES ${OGRE_INCLUDE_DIRS}
-    )
-    if(_ogre_overlay_static_library_abs)
-      set_property(TARGET rviz_ogre_vendor::OgreOverlay APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
-    endif()
-    if(_ogre_overlay_static_library_debug_abs)
-      set_property(TARGET rviz_ogre_vendor::OgreOverlay APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
-    endif()
-
-    set(_extra_interface_link_libraries rviz_ogre_vendor::OgreMain)
-    set_target_properties(rviz_ogre_vendor::OgreOverlay
-      PROPERTIES
-        "INTERFACE_LINK_LIBRARIES" "${_extra_interface_link_libraries}"
-    )
-  endif()
-  if("RenderSystem_GLStatic" STREQUAL ${_lib} OR "RenderSystem_GL" STREQUAL ${_lib})
-    find_library(_render_system_gl_static_library_abs ${_lib}
-      PATHS
-        ${OGRE_LIBRARY_DIRS}
-      NO_DEFAULT_PATH
-      NO_CMAKE_ENVIRONMENT_PATH
-      NO_CMAKE_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-      NO_CMAKE_SYSTEM_PATH
-      NO_CMAKE_FIND_ROOT_PATH
-    )
-    find_library(_render_system_gl_static_library_debug_abs ${_lib}_d
-      PATHS
-        ${OGRE_LIBRARY_DIRS}
-      NO_DEFAULT_PATH
-      NO_CMAKE_ENVIRONMENT_PATH
-      NO_CMAKE_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-      NO_CMAKE_SYSTEM_PATH
-      NO_CMAKE_FIND_ROOT_PATH
-    )
-    if(NOT _render_system_gl_static_library_debug_abs AND NOT WIN32)
-      # On macOS it seems the _d is not used, so just use the normal library name.
-      set(_render_system_gl_static_library_debug_abs ${_render_system_gl_static_library_abs})
-    endif()
-
-    add_library(rviz_ogre_vendor::RenderSystem_GL UNKNOWN IMPORTED)
-    message(STATUS "rviz_ogre_vendor::RenderSystem_GL for IMPORTED_LOCATION_RELEASE: ${_render_system_gl_static_library_abs}")
-    message(STATUS "rviz_ogre_vendor::RenderSystem_GL for IMPORTED_LOCATION_DEBUG: ${_render_system_gl_static_library_debug_abs}")
-    set_target_properties(rviz_ogre_vendor::RenderSystem_GL
-      PROPERTIES
-        IMPORTED_LOCATION_RELEASE ${_render_system_gl_static_library_abs}
-        IMPORTED_LOCATION_DEBUG ${_render_system_gl_static_library_debug_abs}
-    )
-
-    set_property(TARGET rviz_ogre_vendor::RenderSystem_GL
-      PROPERTY
-        INTERFACE_INCLUDE_DIRECTORIES ${OGRE_INCLUDE_DIRS}
-    )
-    if(_render_system_gl_static_library_abs)
-      set_property(TARGET rviz_ogre_vendor::RenderSystem_GL APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
-    endif()
-    if(_render_system_gl_static_library_debug_abs)
-      set_property(TARGET rviz_ogre_vendor::RenderSystem_GL APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
-    endif()
-
-    set(_extra_interface_link_libraries rviz_ogre_vendor::OgreMain)
-    set_target_properties(rviz_ogre_vendor::RenderSystem_GL
-      PROPERTIES
-        "INTERFACE_LINK_LIBRARIES" "${_extra_interface_link_libraries}"
-    )
-  endif()
-  if("OgreGLSupportStatic" STREQUAL ${_lib} OR "OgreGLSupport" STREQUAL ${_lib})
-    find_library(_ogre_gl_support_static_library_abs ${_lib}
-      PATHS
-        ${OGRE_LIBRARY_DIRS}
-      NO_DEFAULT_PATH
-      NO_CMAKE_ENVIRONMENT_PATH
-      NO_CMAKE_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-      NO_CMAKE_SYSTEM_PATH
-      NO_CMAKE_FIND_ROOT_PATH
-    )
-    find_library(_ogre_gl_support_static_library_debug_abs ${_lib}_d
-      PATHS
-        ${OGRE_LIBRARY_DIRS}
-      NO_DEFAULT_PATH
-      NO_CMAKE_ENVIRONMENT_PATH
-      NO_CMAKE_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-      NO_CMAKE_SYSTEM_PATH
-      NO_CMAKE_FIND_ROOT_PATH
-    )
-    if(NOT _ogre_gl_support_static_library_debug_abs AND NOT WIN32)
-      # On macOS it seems the _d is not used, so just use the normal library name.
-      set(_ogre_gl_support_static_library_debug_abs ${_ogre_gl_support_static_library_abs})
-    endif()
-
-    add_library(rviz_ogre_vendor::OgreGLSupport UNKNOWN IMPORTED)
-    message(STATUS "rviz_ogre_vendor::OgreGLSupport for IMPORTED_LOCATION_RELEASE: ${_ogre_gl_support_static_library_abs}")
-    message(STATUS "rviz_ogre_vendor::OgreGLSupport for IMPORTED_LOCATION_DEBUG: ${_ogre_gl_support_static_library_debug_abs}")
-    set_target_properties(rviz_ogre_vendor::OgreGLSupport
-      PROPERTIES
-        IMPORTED_LOCATION_RELEASE ${_ogre_gl_support_static_library_abs}
-        IMPORTED_LOCATION_DEBUG ${_ogre_gl_support_static_library_debug_abs}
-    )
-
-    set_property(TARGET rviz_ogre_vendor::OgreGLSupport
-      PROPERTY
-        INTERFACE_INCLUDE_DIRECTORIES ${OGRE_INCLUDE_DIRS}
-    )
-    if(_ogre_gl_support_static_library_abs)
-      set_property(TARGET rviz_ogre_vendor::OgreGLSupport APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
-    endif()
-    if(_ogre_gl_support_static_library_debug_abs)
-      set_property(TARGET rviz_ogre_vendor::OgreGLSupport APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
-    endif()
-
-    set(_extra_interface_link_libraries rviz_ogre_vendor::OgreMain)
-    set_target_properties(rviz_ogre_vendor::OgreGLSupport
-      PROPERTIES
-        "INTERFACE_LINK_LIBRARIES" "${_extra_interface_link_libraries}"
-    )
-  endif()
-endforeach()
+# try to look for compatible OGRE
+find_package(OGRE 1.12 QUIET)
+if(NOT OGRE_FOUND)
+  # add the local Modules directory to the modules path
+  if(WIN32)
+    set(OGRE_DIR "${@PROJECT_NAME@_DIR}/../../../opt/rviz_ogre_vendor/CMake")
+    set(OGRE_CMAKE_MODULE_DIR "${@PROJECT_NAME@_DIR}/../../../opt/rviz_ogre_vendor/CMake")
+    list(INSERT CMAKE_MODULE_PATH 0 ${OGRE_CMAKE_MODULE_DIR})
+    message(STATUS "Prepending to CMAKE_MODULE_PATH: '${OGRE_CMAKE_MODULE_DIR}'")
+  elseif(APPLE)
+    set(OGRE_DIR "${@PROJECT_NAME@_DIR}/../../../opt/rviz_ogre_vendor/CMake")
+  else()
+    set(OGRE_DIR "${@PROJECT_NAME@_DIR}/../../../opt/rviz_ogre_vendor/lib/OGRE/cmake")
+  endif()
+  message(STATUS "Setting OGRE_DIR to: '${OGRE_DIR}'")
+
+  set(FREETYPE_HOME "${rviz_ogre_vendor_DIR}/../../../opt/rviz_ogre_vendor")
+  set(ZLIB_HOME "${rviz_ogre_vendor_DIR}/../../../opt/rviz_ogre_vendor")
+
+  find_package(OGRE REQUIRED NO_SYSTEM_ENVIRONMENT_PATH)
+endif()
+message(STATUS "OGRE_LIBRARIES: ${OGRE_LIBRARIES}")
+message(STATUS "OGRE_LIBRARY_DIRS: ${OGRE_LIBRARY_DIRS}")
+message(STATUS "OGRE_PLUGINS: ${OGRE_PLUGINS}")
+message(STATUS "OGRE_PLUGIN_DIR: ${OGRE_PLUGIN_DIR}")
+
+list(APPEND OGRE_LIBRARIES ${OGRE_PLUGINS})
+list(APPEND OGRE_LIBRARY_DIRS ${OGRE_PLUGIN_DIR})
+
+foreach(_lib IN LISTS OGRE_LIBRARIES)
+  # Remove debug suffix from library name for matching
+  string(REPLACE "_d" "" _lib ${_lib})
+
+  if("OgreMainStatic" STREQUAL ${_lib} OR "OgreMain" STREQUAL ${_lib})
+    find_library(_ogre_main_static_library_abs ${_lib}
+      PATHS
+        ${OGRE_LIBRARY_DIRS}
+      NO_DEFAULT_PATH
+      NO_CMAKE_ENVIRONMENT_PATH
+      NO_CMAKE_PATH
+      NO_SYSTEM_ENVIRONMENT_PATH
+      NO_CMAKE_SYSTEM_PATH
+      NO_CMAKE_FIND_ROOT_PATH
+    )
+    find_library(_ogre_main_static_library_debug_abs ${_lib}_d
+      PATHS
+        ${OGRE_LIBRARY_DIRS}
+      NO_DEFAULT_PATH
+      NO_CMAKE_ENVIRONMENT_PATH
+      NO_CMAKE_PATH
+      NO_SYSTEM_ENVIRONMENT_PATH
+      NO_CMAKE_SYSTEM_PATH
+      NO_CMAKE_FIND_ROOT_PATH
+    )
+    if(NOT _ogre_main_static_library_debug_abs AND NOT WIN32)
+      # On macOS it seems the _d is not used, so just use the normal library name.
+      set(_ogre_main_static_library_debug_abs ${_ogre_main_static_library_abs})
+    endif()
+
+    add_library(rviz_ogre_vendor::OgreMain UNKNOWN IMPORTED)
+    message(STATUS "rviz_ogre_vendor::OgreMain for IMPORTED_LOCATION_RELEASE: ${_ogre_main_static_library_abs}")
+    message(STATUS "rviz_ogre_vendor::OgreMain for IMPORTED_LOCATION_DEBUG: ${_ogre_main_static_library_debug_abs}")
+    set_target_properties(rviz_ogre_vendor::OgreMain
+      PROPERTIES
+        IMPORTED_LOCATION_RELEASE ${_ogre_main_static_library_abs}
+        IMPORTED_LOCATION_DEBUG ${_ogre_main_static_library_debug_abs}
+    )
+
+    set_property(TARGET rviz_ogre_vendor::OgreMain
+      PROPERTY
+        INTERFACE_INCLUDE_DIRECTORIES ${OGRE_INCLUDE_DIRS}
+    )
+    if(_ogre_main_static_library_abs)
+      set_property(TARGET rviz_ogre_vendor::OgreMain APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
+    endif()
+    if(_ogre_main_static_library_debug_abs)
+      set_property(TARGET rviz_ogre_vendor::OgreMain APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
+    endif()
+
+    set(_extra_interface_link_libraries)
+    find_library(FREEIMAGE_LIBRARIES freeimage)
+    if(NOT FREEIMAGE_LIBRARIES)
+      message(STATUS "Could not find freeimage library")
+    else()
+      list(APPEND _extra_interface_link_libraries ${FREEIMAGE_LIBRARIES})
+    endif()
+
+    find_package(Freetype QUIET)
+    if(NOT Freetype_FOUND)
+      # try newer method with exported targets
+      set(freetype_DIR
+        "${rviz_ogre_vendor_DIR}/../../../opt/rviz_ogre_vendor/lib/cmake/freetype")
+      find_package(freetype CONFIG REQUIRED)
+    endif()
+    if(FREETYPE_LIBRARIES)
+      list(APPEND _extra_interface_link_libraries ${FREETYPE_LIBRARIES})
+    elseif(TARGET freetype)
+      # newer versions of freetype provide exported cmake targets
+      list(APPEND _extra_interface_link_libraries freetype)
+    else()
+      message(FATAL_ERROR "Could not find freetype package")
+    endif()
+
+    find_package(ZLIB REQUIRED)
+
+    if(NOT ZLIB_LIBRARIES)
+      message(FATAL_ERROR "Could not find zlib library")
+    endif()
+    list(APPEND _extra_interface_link_libraries ${ZLIB_LIBRARIES})
+
+    find_package(OpenGL REQUIRED)
+    list(APPEND _extra_interface_link_libraries ${OPENGL_LIBRARIES})
+    list(APPEND _extra_interface_link_libraries ${CMAKE_DL_LIBS})
+    if(UNIX AND NOT APPLE)
+      find_package(X11 REQUIRED)
+      list(APPEND _extra_interface_link_libraries ${X11_LIBRARIES} ${X11_Xt_LIB} ${X11_Xrandr_LIB})
+      find_library(XAW_LIBRARY NAMES Xaw Xaw7 PATHS ${DEP_LIB_SEARCH_DIR} ${X11_LIB_SEARCH_PATH})
+      list(APPEND _extra_interface_link_libraries ${XAW_LIBRARY})
+    endif()
+    if(APPLE)
+      list(APPEND _extra_interface_link_libraries "-framework Cocoa")
+    endif()
+    set_target_properties(rviz_ogre_vendor::OgreMain
+      PROPERTIES
+        "INTERFACE_LINK_LIBRARIES" "${_extra_interface_link_libraries}"
+    )
+  endif()
+  if("OgreOverlayStatic" STREQUAL ${_lib} OR "OgreOverlay" STREQUAL ${_lib})
+    find_library(_ogre_overlay_static_library_abs ${_lib}
+      PATHS
+        ${OGRE_LIBRARY_DIRS}
+      NO_DEFAULT_PATH
+      NO_CMAKE_ENVIRONMENT_PATH
+      NO_CMAKE_PATH
+      NO_SYSTEM_ENVIRONMENT_PATH
+      NO_CMAKE_SYSTEM_PATH
+      NO_CMAKE_FIND_ROOT_PATH
+    )
+    find_library(_ogre_overlay_static_library_debug_abs ${_lib}_d
+      PATHS
+        ${OGRE_LIBRARY_DIRS}
+      NO_DEFAULT_PATH
+      NO_CMAKE_ENVIRONMENT_PATH
+      NO_CMAKE_PATH
+      NO_SYSTEM_ENVIRONMENT_PATH
+      NO_CMAKE_SYSTEM_PATH
+      NO_CMAKE_FIND_ROOT_PATH
+    )
+    if(NOT _ogre_overlay_static_library_debug_abs AND NOT WIN32)
+      # On macOS it seems the _d is not used, so just use the normal library name.
+      set(_ogre_overlay_static_library_debug_abs ${_ogre_overlay_static_library_abs})
+    endif()
+
+    add_library(rviz_ogre_vendor::OgreOverlay UNKNOWN IMPORTED)
+    message(STATUS "rviz_ogre_vendor::OgreOverlay for IMPORTED_LOCATION_RELEASE: ${_ogre_overlay_static_library_abs}")
+    message(STATUS "rviz_ogre_vendor::OgreOverlay for IMPORTED_LOCATION_DEBUG: ${_ogre_overlay_static_library_debug_abs}")
+    set_target_properties(rviz_ogre_vendor::OgreOverlay
+      PROPERTIES
+        IMPORTED_LOCATION_RELEASE ${_ogre_overlay_static_library_abs}
+        IMPORTED_LOCATION_DEBUG ${_ogre_overlay_static_library_debug_abs}
+    )
+
+    set_property(TARGET rviz_ogre_vendor::OgreOverlay
+      PROPERTY
+        INTERFACE_INCLUDE_DIRECTORIES ${OGRE_INCLUDE_DIRS}
+    )
+    if(_ogre_overlay_static_library_abs)
+      set_property(TARGET rviz_ogre_vendor::OgreOverlay APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
+    endif()
+    if(_ogre_overlay_static_library_debug_abs)
+      set_property(TARGET rviz_ogre_vendor::OgreOverlay APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
+    endif()
+
+    set(_extra_interface_link_libraries rviz_ogre_vendor::OgreMain)
+    set_target_properties(rviz_ogre_vendor::OgreOverlay
+      PROPERTIES
+        "INTERFACE_LINK_LIBRARIES" "${_extra_interface_link_libraries}"
+    )
+  endif()
+  if("RenderSystem_GLStatic" STREQUAL ${_lib} OR "RenderSystem_GL" STREQUAL ${_lib})
+    find_library(_render_system_gl_static_library_abs ${_lib}
+      PATHS
+        ${OGRE_LIBRARY_DIRS}
+      NO_DEFAULT_PATH
+      NO_CMAKE_ENVIRONMENT_PATH
+      NO_CMAKE_PATH
+      NO_SYSTEM_ENVIRONMENT_PATH
+      NO_CMAKE_SYSTEM_PATH
+      NO_CMAKE_FIND_ROOT_PATH
+    )
+    find_library(_render_system_gl_static_library_debug_abs ${_lib}_d
+      PATHS
+        ${OGRE_LIBRARY_DIRS}
+      NO_DEFAULT_PATH
+      NO_CMAKE_ENVIRONMENT_PATH
+      NO_CMAKE_PATH
+      NO_SYSTEM_ENVIRONMENT_PATH
+      NO_CMAKE_SYSTEM_PATH
+      NO_CMAKE_FIND_ROOT_PATH
+    )
+    if(NOT _render_system_gl_static_library_debug_abs AND NOT WIN32)
+      # On macOS it seems the _d is not used, so just use the normal library name.
+      set(_render_system_gl_static_library_debug_abs ${_render_system_gl_static_library_abs})
+    endif()
+
+    add_library(rviz_ogre_vendor::RenderSystem_GL UNKNOWN IMPORTED)
+    message(STATUS "rviz_ogre_vendor::RenderSystem_GL for IMPORTED_LOCATION_RELEASE: ${_render_system_gl_static_library_abs}")
+    message(STATUS "rviz_ogre_vendor::RenderSystem_GL for IMPORTED_LOCATION_DEBUG: ${_render_system_gl_static_library_debug_abs}")
+    set_target_properties(rviz_ogre_vendor::RenderSystem_GL
+      PROPERTIES
+        IMPORTED_LOCATION_RELEASE ${_render_system_gl_static_library_abs}
+        IMPORTED_LOCATION_DEBUG ${_render_system_gl_static_library_debug_abs}
+    )
+
+    set_property(TARGET rviz_ogre_vendor::RenderSystem_GL
+      PROPERTY
+        INTERFACE_INCLUDE_DIRECTORIES ${OGRE_INCLUDE_DIRS}
+    )
+    if(_render_system_gl_static_library_abs)
+      set_property(TARGET rviz_ogre_vendor::RenderSystem_GL APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
+    endif()
+    if(_render_system_gl_static_library_debug_abs)
+      set_property(TARGET rviz_ogre_vendor::RenderSystem_GL APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
+    endif()
+
+    set(_extra_interface_link_libraries rviz_ogre_vendor::OgreMain)
+    set_target_properties(rviz_ogre_vendor::RenderSystem_GL
+      PROPERTIES
+        "INTERFACE_LINK_LIBRARIES" "${_extra_interface_link_libraries}"
+    )
+  endif()
+  if("OgreGLSupportStatic" STREQUAL ${_lib} OR "OgreGLSupport" STREQUAL ${_lib})
+    find_library(_ogre_gl_support_static_library_abs ${_lib}
+      PATHS
+        ${OGRE_LIBRARY_DIRS}
+      NO_DEFAULT_PATH
+      NO_CMAKE_ENVIRONMENT_PATH
+      NO_CMAKE_PATH
+      NO_SYSTEM_ENVIRONMENT_PATH
+      NO_CMAKE_SYSTEM_PATH
+      NO_CMAKE_FIND_ROOT_PATH
+    )
+    find_library(_ogre_gl_support_static_library_debug_abs ${_lib}_d
+      PATHS
+        ${OGRE_LIBRARY_DIRS}
+      NO_DEFAULT_PATH
+      NO_CMAKE_ENVIRONMENT_PATH
+      NO_CMAKE_PATH
+      NO_SYSTEM_ENVIRONMENT_PATH
+      NO_CMAKE_SYSTEM_PATH
+      NO_CMAKE_FIND_ROOT_PATH
+    )
+    if(NOT _ogre_gl_support_static_library_debug_abs AND NOT WIN32)
+      # On macOS it seems the _d is not used, so just use the normal library name.
+      set(_ogre_gl_support_static_library_debug_abs ${_ogre_gl_support_static_library_abs})
+    endif()
+
+    add_library(rviz_ogre_vendor::OgreGLSupport UNKNOWN IMPORTED)
+    message(STATUS "rviz_ogre_vendor::OgreGLSupport for IMPORTED_LOCATION_RELEASE: ${_ogre_gl_support_static_library_abs}")
+    message(STATUS "rviz_ogre_vendor::OgreGLSupport for IMPORTED_LOCATION_DEBUG: ${_ogre_gl_support_static_library_debug_abs}")
+    set_target_properties(rviz_ogre_vendor::OgreGLSupport
+      PROPERTIES
+        IMPORTED_LOCATION_RELEASE ${_ogre_gl_support_static_library_abs}
+        IMPORTED_LOCATION_DEBUG ${_ogre_gl_support_static_library_debug_abs}
+    )
+
+    set_property(TARGET rviz_ogre_vendor::OgreGLSupport
+      PROPERTY
+        INTERFACE_INCLUDE_DIRECTORIES ${OGRE_INCLUDE_DIRS}
+    )
+    if(_ogre_gl_support_static_library_abs)
+      set_property(TARGET rviz_ogre_vendor::OgreGLSupport APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
+    endif()
+    if(_ogre_gl_support_static_library_debug_abs)
+      set_property(TARGET rviz_ogre_vendor::OgreGLSupport APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
+    endif()
+
+    set(_extra_interface_link_libraries rviz_ogre_vendor::OgreMain)
+    set_target_properties(rviz_ogre_vendor::OgreGLSupport
+      PROPERTIES
+        "INTERFACE_LINK_LIBRARIES" "${_extra_interface_link_libraries}"
+    )
+  endif()
+endforeach()
